Fruit.prototype.getInformation = function() {
    return 'This ' + this.type + ' is ' + this.color + '.';
}

prototypes allow methods and properties to be accesses by all instances of the fucntion

function declarations are "hoisted" as in can be referenced before they are declared


example of a class with a constructor
class Polygon {
    constructor(height, width) {
        this.height = height;
        this.width = width;
    }
    getArea() {
        return this.height * this.width;
    }
}



Expression interpolation(insertion of a type into a different type):
    template literals
const a = 2;
const b = 3;

console.log(`The sum of a and b is ${a + b}. 
The product of a and b is ${a * b}.`);


var a = 5;
var b = 10;


tagged template literals

function foo(strings, ...values) {
    let a = values[0];
    let b = values[1];

    return `Sum ${a + b}
Product ${a * b} 
Division ${b / a}`;
}

console.log(foo`Num1 ${a + 10}
Num2 ${b * 2} 
Num3 ${b / a}`);

Sum 35
Product 300 
Division 1.3333333333333333

